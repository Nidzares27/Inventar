@using Inventar.ViewModels.Sales
@model SalesEntryGroupViewModel
@{
    ViewData["Title"] = "Sales Detail (Ungrouped)";
}

<h2>@Inventar.Resources.Resource.PerProductsDetailedUNGrouped</h2>

@if (Model.Labels.CustName != null)
{
    <div  style="margin-bottom:1rem">
        <strong style="color:blue">@Inventar.Resources.Resource.FullName: </strong><span id="custName">@Model.Labels.CustName</span>
    </div>
}

@if (Model.StartDate.HasValue && Model.EndDate.HasValue)
{
    <p id="dateStartEnd">
        <b style="color:mediumblue">@Model.StartDate.Value.ToString("dd-MM-yyyy")</b> — <b style="color:mediumblue">@Model.EndDate.Value.ToString("dd-MM-yyyy")</b>   
    </p>
}

<table id="labele">
    <thead>
        <tr>
            <th>@Inventar.Resources.Resource.ProductID</th>
            <th>@Inventar.Resources.Resource.ProductNumber</th>
            <th>@Inventar.Resources.Resource.Name</th>
            <th>Model</th>
            <th>@Inventar.Resources.Resource.Color</th>
            <th>@Inventar.Resources.Resource.Size</th>
            <th>@Inventar.Resources.Resource.M2PerProduct</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@Model.Labels.ProductId</td>
            <td>@Model.Labels.ProductNumber</td>
            <td>@Model.Labels.Name</td>
            <td>@Model.Labels.Model</td>
            <td>@Model.Labels.Color</td>
            <td>@Model.Labels.Size</td>
            <td>@Model.Labels.M2PerProduct</td>
        </tr>
    </tbody>
</table>

<table id="detailsUngroupedTable" class="table table-bordered tabela" style="font-weight:500">
    <thead>
        <tr>
            <th>#</th>
            <th>@Inventar.Resources.Resource.SaleTime</th>
            @if (Model.Labels.CustName == null)
            {
                <th>@Inventar.Resources.Resource.CustomerFullName</th>
            }
            <th>@Inventar.Resources.Resource.M2Total</th>
            <th>@Inventar.Resources.Resource.Price</th>
            <th>@Inventar.Resources.Resource.Quantity</th>
            <th>@Inventar.Resources.Resource.TotalPrice</th>
        </tr>
        <tr class="filters">
            <th><input style="width:2rem" type="text" placeholder="" disabled></th>
            <th>
                <input type="date" id="minDate" placeholder="">
            </th>
            @if (Model.Labels.CustName == null)
            {
                <th><input type="text" placeholder="Customer" /></th>
            }
            <th><input type="text" placeholder="M² Total" /></th>
            <th><input type="text" placeholder="Price" /></th>
            <th><input type="text" placeholder="Quantity" /></th>
            <th><input type="text" placeholder="Total Price" /></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in Model.Entries)
        {
            <tr>
                <td></td>
                <td>@entry.VrijemeProdaje.ToString("dd-MM-yyyy HH:mm")</td>
                @if (Model.Labels.CustName == null)
                {
                    <td>@entry.CustomerFullName</td>
                }
                <td>@(entry.PerM2 ? entry.M2Total : "")</td>
                <td style="color:@(entry.PerM2 ? "green" : "black")">@entry.Price€</td>
                <td>@entry.Quantity</td>
                <td style="color:@(entry.PerM2 ? "green" : "black")">@Math.Round((entry.PerM2 ? entry.Price * (decimal)entry.M2Total : entry.Price * entry.Quantity), 2)€</td>
            </tr>
        }
    </tbody>
</table>

<button id="downloadDetailsUngroupedPDF" class="btn btn-primary mb-3">
    @Inventar.Resources.Resource.PrintPDF
</button>

@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#detailsUngroupedTable').DataTable({
                paging: true,
                pageLength: 10,
                order: [[1, "desc"]],
                orderCellsTop: true,
                fixedHeader: true
            });

            function parseCustomDate(dateString) {
                if (!dateString) return null;

                var parts = dateString.split(' ');
                var dateParts = parts[0].split('-');
                var timeParts = parts[1] ? parts[1].split(':') : [0, 0];

                return new Date(dateParts[2], dateParts[1] - 1, dateParts[0], timeParts[0], timeParts[1]);
            }

            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
                var minDate = $('#minDate').val();
                var saleTime = data[1];

                if (!saleTime) return false;

                var saleDate = parseCustomDate(saleTime);
                if (!saleDate) return false;

                if (!minDate) return true;

                var filterDate = new Date(minDate + "T00:00:00");

                var saleDateOnly = new Date(saleDate.getFullYear(), saleDate.getMonth(), saleDate.getDate());

                return saleDateOnly.getTime() === filterDate.getTime();
            });

            $('#minDate').on('change', function () {
                table.draw();
                updateTotals();
            });

            $('#detailsUngroupedTable thead tr:eq(1) th').each(function (i) {
                $('input', this).on('keyup change', function () {
                    if (i === 1) {
                        return;
                    }
                    table.column(i).search(this.value).draw();
                });
            });

            function updateTotals() {
                var table = $('#detailsUngroupedTable').DataTable();
                var totalQuantity = 0;
                var totalPrice = 0;
                var totalM2 = 0;

                // Determine table type by checking number of columns
                const columnCount = $('#detailsUngroupedTable thead tr:first th').length;

                // Index mapping based on table mode
                let indexes = {
                    quantity: 5,
                    price: 6,
                    m2: 3
                };

                if (columnCount === 6) { // ungrouped table
                    indexes = {
                        quantity: 4,
                        price: 5,
                        m2: 2
                    };
                }

                table.rows({ filter: 'applied' }).data().each(function (value, index) {
                    totalQuantity += parseFloat(value[indexes.quantity]) || 0;
                    totalPrice += parseFloat(value[indexes.price]) || 0;
                    totalM2 += parseFloat(value[indexes.m2]) || 0;
                });

                $('#totalQuantity').text(totalQuantity);
                $('#totalPrice').text(totalPrice.toFixed(2));
                $('#totalM2').text(totalM2.toFixed(2));

            }

            $('#detailsUngroupedTable').after(`
                                        <div style="margin-top: 10px; font-weight: bold;">
        @Inventar.Resources.Resource.TotalQuantity: <span id="totalQuantity">0</span>   |
        @Inventar.Resources.Resource.M2Total: <span id="totalM2">0.00</span>   |
        @Inventar.Resources.Resource.PriceTotal: <span id="totalPrice">0.00</span>€
                                        </div>
                                    `);

            table.on('draw', function () {
                updateTotals();

                let counter = 1;
                table.rows({ search: 'applied', order: 'applied' }).every(function () {
                    var node = this.node();
                    $('td:eq(0)', node).html(counter++);
                });
            });

            updateTotals();
            table.draw();
        });
    </script>

    <script>
        $(document).ready(function () {
            $('#downloadDetailsUngroupedPDF').on('click', function () {
                var table = $('#detailsUngroupedTable').DataTable();

                var data = [];

                table.rows({ search: 'applied' }).every(function () {
                    var row = this.node();
                    var rowData = [];
                    $(row).find('td').each(function () {
                        rowData.push($(this).text().trim());
                    });
                    data.push(rowData);
                });

                // Get filter values
                var filters = {};
                $('#detailsUngroupedTable thead tr:eq(1) th').each(function (i) {
                    var input = $(this).find('input');
                    if (input.length > 0) {
                        filters[i] = input.val();
                    }
                });

                // Get date range
                var minDate = $('#minDate').val();

                // Get heading text
                var heading1 = $('h2').text();
                var heading2 = $('#custName').text();
                var heading3 = $('#dateStartEnd').text();

                // Get label values from the labele table
                var productId = $('#labele td:nth-child(1)').text();
                var productNumber = $('#labele td:nth-child(2)').text();
                var name = $('#labele td:nth-child(3)').text();
                var model = $('#labele td:nth-child(4)').text();
                var color = $('#labele td:nth-child(5)').text();
                var size = $('#labele td:nth-child(6)').text();
                var m2PerProduct = $('#labele td:nth-child(7)').text();


                // Get column headers (excluding last one)
                var columnHeaders = [];
                $('#detailsUngroupedTable thead tr:eq(0) th').each(function (i, th) {
                    if (i < $(this).closest('tr').children().length/*  - 1 */) { // exclude last column
                        columnHeaders.push($(th).text().trim());
                    }
                });

                // Get totals from your DOM or compute here
                var totalQuantity = parseInt($('#totalQuantity').text()) || 0;
                var totalM2 = parseFloat($('#totalM2').text()) || 0;
                var totalPrice = parseFloat($('#totalPrice').text()) || 0;

                var customerName = '@Model.Labels.CustName';

                // Send data to server
                $.ajax({
                    url: '@Url.Action("GenerateDetailsUngroupedPdf", "Pdf")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        heading1: heading1,
                        heading2: heading2,
                        heading3: heading3,
                        customerName: customerName,
                        data: data,
                        filters: filters,
                        minDate: minDate,
                        columnHeaders: columnHeaders,
                        totalQuantity: totalQuantity,
                        totalM2: totalM2,
                        totalPrice: totalPrice,
                        productId: productId,
                        productNumber: productNumber,
                        name: name,
                        model: model,
                        color: color,
                        size: size,
                        m2PerProduct: m2PerProduct
                    }),
                    xhrFields: {
                        responseType: 'blob'
                    },
                    success: function (blob) {
                        var link = document.createElement('a');
                        link.href = window.URL.createObjectURL(blob);
                        link.download = `Po_proizvodima_detaljno_(Negrupisano)_${customerName}.pdf`;
                        link.click();
                    }
                });
            });

        });
    </script>
}
<style>
    #detailsUngroupedTable thead tr:first-child th {
        background-color: khaki;
    }
    #labele {
        width: 100%;
        border-collapse: collapse;
        text-align: center;
    }

        #labele th,
        #labele td {
            border: 1px solid #ccc; /* Light inner borders */
            padding: 8px;
        }

        #labele thead th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

    #labele {
        border: none;
    }
</style>