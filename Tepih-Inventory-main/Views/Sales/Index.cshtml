@using Inventar.ViewModels.Shared
@model IEnumerable<SummaryViewModel>
<div id="pdfContent">
    <h2>@Inventar.Resources.Resource.SalesGrouped</h2>

    <table id="SalesTable" class="display tabela" style="width:100%; font-weight:500">
        <thead>
            <tr>
                <th>#</th>
                <th>@Inventar.Resources.Resource.SaleTime</th>
                <th>@Inventar.Resources.Resource.CustomerFullName</th>
                <th>@Inventar.Resources.Resource.M2Total</th>
                <th>@Inventar.Resources.Resource.TotalPrice</th>
                <th>@Inventar.Resources.Resource.TotalQuantity</th>
                <th>@Inventar.Resources.Resource.Seller</th>
                <th>@Inventar.Resources.Resource.PlannedPaymentType</th>
                <th></th>
            </tr>
            <tr class="filters">
                <th><input style="width:2rem" type="text" placeholder="" disabled></th>
                <th>
                    <input type="date" id="minDate" placeholder="From">
                    <input type="date" id="maxDate" placeholder="To">
                </th>
                <th><input type="text" placeholder="" /></th>
                <th><input type="text" placeholder="" /></th>
                <th><input type="text" placeholder="" /></th>
                <th><input type="text" placeholder="" /></th>
                <th><input type="text" placeholder="" /></th>
                <th><input type="text" placeholder="" /></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td></td>
                    <td>@item.VrijemeProdaje.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@item.CustomerFullName</td>
                    <td>@(item.M2Total > 0 ? Math.Round((decimal)item.M2Total, 2) : "" )
                    <td>@Math.Round(item.TotalPrice, 2)€</td>
                    <td>@item.TotalQuantity</td>
                    <td>@item.Prodavac</td>
                    <td>@item.PlannedPaymentType</td>
                    <td>
                        <a class="btn btn-primary" href="@Url.Action("Details", "Sales", new { customer = item.CustomerFullName, saleTime = item.VrijemeProdaje.ToString("o"), returnFromDetails = ViewBag.ReturnFromDetails })">@Inventar.Resources.Resource.SalesReport</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<button id="downloadGroupedSalesPDF" class="btn btn-primary">@Inventar.Resources.Resource.PrintPDF</button>


@section Scripts {
    <script>
        jQuery.extend(jQuery.fn.dataTable.ext.type.order, {
            "datetime-custom-pre": function (d) {
                if (!d) return 0;

                var parts = d.split(' ');
                var date = parts[0].split('-');
                var time = parts[1] ? parts[1].split(':') : ['00', '00', '00'];

                var iso = `${date[2]}-${date[1]}-${date[0]}T${time[0]}:${time[1]}:${time[2]}`;
                return new Date(iso).getTime();
            },
            "datetime-custom-asc": function (a, b) {
                return a - b;
            },
            "datetime-custom-desc": function (a, b) {
                return b - a;
            }
        });
    </script>

    <script>
        $(document).ready(function () {
            var table = $('#SalesTable').DataTable({
                "paging": true,
                "pageLength": 10,
                "order": [[1, "desc"]],
                "orderCellsTop": true,
                "fixedHeader": true,
                "columnDefs": [
                    {
                        targets: 1, // Index of VrijemeProdaje column
                        type: "datetime-custom" // Use the custom date type we defined
                    }
                ]
            });

            function parseCustomDate(dateString) {
                if (!dateString) return null;

                var parts = dateString.split(' ');
                var dateParts = parts[0].split('-');
                var timeParts = parts[1] ? parts[1].split(':') : [0, 0, 0];

                return new Date(dateParts[2], dateParts[1] - 1, dateParts[0], timeParts[0], timeParts[1], timeParts[2]);
            }

            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {

                var minDate = $('#minDate').val();
                var maxDate = $('#maxDate').val();
                var purchaseTime = data[1];

                var purchaseDate = parseCustomDate(purchaseTime);
                if (!purchaseDate) return false;

                var min = minDate ? new Date(minDate + "T00:00:00") : null;
                var max = maxDate ? new Date(maxDate + "T23:59:59") : null;

                if ((min === null || purchaseDate >= min) && (max === null || purchaseDate <= max)) {
                    return true;
                }
                return false;
            });

            $('#minDate, #maxDate').on('change', function () {
                table.draw();
                updateTotals();
            });

            $('#SalesTable thead tr:eq(1) th').each(function (i) {
                $('input', this).on('keyup change', function () {
                    if (i === 1) {
                        return;
                    }
                    table.column(i).search(this.value).draw();
                });
            });

            var m2ColumnIndex = 3;
            var priceColumnIndex = 4;
            var quantityColumnIndex = 5;

            function updateTotals() {
                var table = $('#SalesTable').DataTable();
                var totalM2 = 0;
                var totalPrice = 0;
                var totalQuantity = 0;

                table.rows({ filter: 'applied' }).data().each(function (value, index) {
                    totalM2 += parseFloat(value[m2ColumnIndex]) || 0;
                    totalPrice += parseFloat(value[priceColumnIndex]) || 0;
                    totalQuantity += parseInt(value[quantityColumnIndex]) || 0;
                });

                $('#totalM2').text(totalM2.toFixed(2));
                $('#totalPrice').text(totalPrice.toFixed(2));
                $('#totalQuantity').text(totalQuantity);

            }

            $('#SalesTable').after(`
                                <div style="margin-top: 10px; font-weight: bold;">
        @Inventar.Resources.Resource.M2Total: <span id="totalM2">0.00</span>   |
        @Inventar.Resources.Resource.TotalQuantity: <span id="totalQuantity">0</span>   |
        @Inventar.Resources.Resource.PriceTotal: <span id="totalPrice">0.00</span>€
                                </div>
                            `);

            table.on('draw', function () {
                updateTotals();

                let counter = 1;
                table.rows({ search: 'applied', order: 'applied' }).every(function () {
                    var node = this.node();
                    $('td:eq(0)', node).html(counter++);
                });
            });

            updateTotals();
            table.draw();
        });
    </script>

    <script>
        $(document).ready(function () {
            $('#downloadGroupedSalesPDF').on('click', function () {
                var table = $('#SalesTable').DataTable();

                var data = [];

                table.rows({ search: 'applied' }).every(function () {
                    var row = this.node();
                    var rowData = [];
                    $(row).find('td').each(function () {
                        rowData.push($(this).text().trim());
                    });
                    data.push(rowData);
                });

                // Get filter values
                var filters = {};
                $('#SalesTable thead tr:eq(1) th').each(function (i) {
                    var input = $(this).find('input');
                    if (input.length > 0) {
                        filters[i] = input.val();
                    }
                });

                // Get date range
                var minDate = $('#minDate').val();
                var maxDate = $('#maxDate').val();

                // Get heading text
                var heading = $('h2').text();

                // Get column headers (excluding last one)
                var columnHeaders = [];
                $('#SalesTable thead tr:eq(0) th').each(function (i, th) {
                    if (i < $(this).closest('tr').children().length - 1) { // exclude last column
                        columnHeaders.push($(th).text().trim());
                    }
                });

                // Get totals from your DOM or compute here
                var totalQuantity = parseInt($('#totalQuantity').text()) || 0;
                var totalM2 = parseFloat($('#totalM2').text()) || 0;
                var totalPrice = parseFloat($('#totalPrice').text()) || 0;

                // Send data to server
                $.ajax({
                    url: '@Url.Action("GenerateSalesPdf", "Pdf")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        heading: heading,
                        data: data,
                        filters: filters,
                        minDate: minDate,
                        maxDate: maxDate,
                        columnHeaders: columnHeaders,
                        totalQuantity: totalQuantity,
                        totalM2: totalM2,
                        totalPrice: totalPrice
                    }),
                    xhrFields: {
                        responseType: 'blob'
                    },
                    success: function (blob) {
                        var link = document.createElement('a');
                        link.href = window.URL.createObjectURL(blob);
                        link.download = 'Grupisane_prodaje.pdf';
                        link.click();
                    }
                });
            });

        });
    </script>
    <style>
        #SalesTable thead tr:first-child th {
            background-color: khaki;
        }
    </style>
}