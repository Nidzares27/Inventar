@model IEnumerable<Inventar.ViewModels.ProdajaViewModel>

<h2>@Inventar.Resources.Resource.Buys: @Model.FirstOrDefault().CustomerFullName</h2>

<table id="BuysTable" class="table stripe" style="font-weight:500">
    <thead>
        <tr>
            <th>Id</th>
@*             <th>Product ID</th>
            *@
            <th>@Inventar.Resources.Resource.Name</th>
            <th>Model</th>
            <th>@Inventar.Resources.Resource.Color</th>
            <th>@Inventar.Resources.Resource.Size</th>
            <th>@Inventar.Resources.Resource.M2PerProduct</th>
            <th>@Inventar.Resources.Resource.M2Total</th>
@*             <th>PriceM2</th>
            <th>PriceUnit</th> *@
            <th>@Inventar.Resources.Resource.Quantity</th>
            <th>@Inventar.Resources.Resource.TotalPrice</th>
            <th>@Inventar.Resources.Resource.SaleTime</th>
            <th></th>
        </tr>
        <tr class="filters">
            <th><input style="width:5rem" type="text" placeholder="Id"></th>
            <th><input style="width:7.5rem" type="text" placeholder="Name"></th>
            <th><input style="width:5rem" type="text" placeholder="Model"></th>
            <th><input style="width:7.5rem" type="text" placeholder="Color"></th>
            <th><input style="width:5rem" type="text" placeholder="Size"></th>
            <th><input style="width:5rem" type="text" placeholder="m2PerUnit"></th>
            <th><input style="width:5rem" type="text" placeholder="m2Total"></th>
            <th><input style="width:5rem" type="text" placeholder="Quantity"></th>
            <th><input style="width:5rem" type="text" placeholder="TotalPrice"></th>
            <th>
                @* <input type="text" placeholder="Sale Time"> *@
                <input type="date" id="minDate" placeholder="@Inventar.Resources.Resource.From">
                <input type="date" id="maxDate" placeholder="@Inventar.Resources.Resource.To">
            </th>
            <th><input style="width:5rem" type="text" placeholder="" disabled></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Id</td>
@*                 <td>@item.TepihId</td>
 *@                <td>@item.Name</td>
                <td>@item.Model</td>
                <td>@item.Color</td>
                <td>@item.Length X @item.Width</td>
                <td>@Math.Round(item.M2PerUnit, 2)</td>
                <td>@Math.Round(item.M2Total, 2)</td>
@*                 <td>@item.PriceM2</td>
                <td>@item.PriceUnit</td> *@
                <td>@item.Quantity</td>
                <td>@Math.Round((item.PerM2 ? item.Price * item.M2Total : item.Price * item.Quantity),2)€</td>
                <td>@item.VrijemeProdaje.ToString("dd-MM-yyyy HH:mm:ss")</td>
                <td>
                    <a href="@Url.Action("Edit", "Sales", new {id=item.Id, returnUrl = Context.Request.Path })">@Inventar.Resources.Resource.Edit</a>
                    <a href="@Url.Action("Delete", "Sales", new {id=item.Id, returnUrl = Context.Request.Path })">@Inventar.Resources.Resource.Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
<div>
    <a asp-action="Index" class="btn btn-secondary btn-sm" style="margin-top:1rem">@Inventar.Resources.Resource.BackToList</a>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#BuysTable').DataTable({
                "paging": true,
                "pageLength": 10,
                "order": [[0, "desc"]], // Sorts the first column (ID) in descending order
                "orderCellsTop": true, // Ensures ordering is applied to the first row only
                "fixedHeader": true, // Keeps the filters visible when scrolling
                initComplete: function () {
                    updateTotals(); // ✅ Call totals only after DataTable is initialized
                }
            });

            // ✅ Identify column indexes (⚠️ Adjust if needed)
            var quantityColumnIndex = 7; // Adjust based on actual column position
            var priceColumnIndex = 8;    // Adjust based on actual column position
            var purchaseTimeColumnIndex = 9; // PurchaseTime column

            // ✅ Custom function to parse `DD-MM-YYYY HH:MM:SS` into JavaScript Date
            function parseCustomDate(dateString) {
                if (!dateString) return null; // Handle empty values

                // Split date and time
                var parts = dateString.split(' ');
                var dateParts = parts[0].split('-'); // [DD, MM, YYYY]
                var timeParts = parts[1] ? parts[1].split(':') : [0, 0, 0]; // [HH, MM, SS]

                // Create Date object (YYYY, MM (0-based), DD, HH, MM, SS)
                return new Date(dateParts[2], dateParts[1] - 1, dateParts[0], timeParts[0], timeParts[1], timeParts[2]);
            }

            // ✅ Custom filtering function for date range
            $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {

                var minDate = $('#minDate').val(); // Get "From" Date (YYYY-MM-DD)
                var maxDate = $('#maxDate').val(); // Get "To" Date (YYYY-MM-DD)
                var purchaseTime = data[9]; // 🔹 Column index of "PurchaseTime"

                // Convert table date to a Date object
                var purchaseDate = parseCustomDate(purchaseTime);
                if (!purchaseDate) return false; // false

                var min = minDate ? new Date(minDate) : null;
                var max = maxDate ? new Date(maxDate) : null;

                // ✅ Apply filtering conditions
                if ((min === null || purchaseDate >= min) && (max === null || purchaseDate <= max)) {
                    return true; // ✅ Show row
                }
                return false; // ❌ Hide row
            });

            // ✅ Listen for changes in the date fields
            $('#minDate, #maxDate').on('change', function () {
                table.draw(); // 🔄 Redraw the table
                updateTotals(); // ✅ Update totals after filtering
            });
            // Add column-wise search
            $('#BuysTable thead tr:eq(1) th').each(function (i) {
                $('input', this).on('keyup change', function () {
                    if (i === 9) {
                        return; // 🚫 Skip search() for date column
                    }
                    table.column(i).search(this.value).draw();
                    // if (table.column(i).search() !== this.value) {
                    //     table.column(i).search(this.value).draw();
                    // }
                });
            });

            // ✅ Function to Calculate and Display Totals
            function updateTotals() {
                var table = $('#BuysTable').DataTable(); // ✅ Ensure table is initialized
                var totalQuantity = 0;
                var totalPrice = 0;

                table.rows({ filter: 'applied' }).data().each(function (value, index) {
                    totalQuantity += parseFloat(value[quantityColumnIndex]) || 0;
                    totalPrice += parseFloat(value[priceColumnIndex]) || 0;
                });

                // ✅ Update total values in the footer
                $('#totalQuantity').text(totalQuantity);
                $('#totalPrice').text(totalPrice.toFixed(2)); // Formatting price to 2 decimal places
            }

            // ✅ Add totals row below the table
            $('#BuysTable').after(`
                        <div style="margin-top: 10px; font-weight: bold;">
                            Total Quantity: <span id="totalQuantity">0</span> |
                            Total Price: <span id="totalPrice">0.00</span>€
                        </div>
                    `);

            // ✅ Update totals when table changes
            table.on('draw', function () {
                updateTotals();
            });
        });
    </script>
    <style>
        td {
            text-align: center !important;
            vertical-align: middle !important;
        }

        th {
            text-align: center !important;
            vertical-align: middle !important;
        }

        col {
            border-style: ridge;
        }

        select {
            margin-right: 0.5rem;
        }

        #SalesTable {
            margin: 0;
            width: 100% !important;
        }
    </style>
}