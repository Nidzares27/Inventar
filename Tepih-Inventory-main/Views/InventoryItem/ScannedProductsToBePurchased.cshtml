@using Inventar.ViewModels.Inventory
@model ScannedProductsOverviewViewModel

<h2>@Inventar.Resources.Resource.BuyerInfo</h2>
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<form asp-action="ScannedProductsToBePurchased" method="post" onsubmit="return validateForm()">
    <input type="hidden" class="form-control" asp-for="PurchaseTime" />
    <div class="form-group">
        <div class="row g-3" style="margin-bottom:1rem">
            <div class="col-sm-6" style="padding-right:2rem">
                <label for="FullName">@Inventar.Resources.Resource.FullName</label>
                <input type="text" id="FullName" class="form-control" asp-for="FullName" required autocomplete="off" />
            </div>
            <div class="col-sm-6" style="padding-left:2rem">
                <div class="row" style="height:100%">
                    <div class="form-check col" style="display: flex; align-items: center;">
                        <input class="form-check-input" type="radio" name="PlannedPaymentType" asp-for="PlannedPaymentType" value="Cash" id="cash">
                        <label class="form-check-label" for="cash" style="padding-left:1rem">
                            @Inventar.Resources.Resource.Cash
                        </label>
                    </div>
                    <div class="form-check col" style="display: flex; align-items: center;">
                        <input class="form-check-input" type="radio" name="PlannedPaymentType" asp-for="PlannedPaymentType" value="Virman" id="virman">
                        <label class="form-check-label" for="virman" style="padding-left:1rem">
                            Virman
                        </label>
                    </div>
                    <div class="form-check col" style="display: flex; align-items: center;">
                        <input class="form-check-input" type="radio" name="PlannedPaymentType" asp-for="PlannedPaymentType" value="Waiting" id="waiting" checked>
                        <label class="form-check-label" for="waiting" style="padding-left:1rem">
                            @Inventar.Resources.Resource.Waiting
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <input type="checkbox" class="form-check-input" asp-for="PrintPDF" />
        <label class="form-check-label" asp-for="PrintPDF">@Inventar.Resources.Resource.PrintPDF</label>
        <div id="suggestions" style="border-style: groove;"></div>
    </div>
    <button type="submit" class="btn btn-primary">@Inventar.Resources.Resource.ConfirmPurchase</button>
</form>
<table id="productTable" class="table table-hover table-striped">
    <thead>
        <tr>
            <th scope="col">ID</th>
            <th scope="col">@Inventar.Resources.Resource.ProductNumber</th>
            <th scope="col">@Inventar.Resources.Resource.Name</th>
            <th scope="col">Model</th>
            <th scope="col">@Inventar.Resources.Resource.Size</th>
            <th scope="col">@Inventar.Resources.Resource.M2Total</th>
            <th scope="col">@Inventar.Resources.Resource.Color</th>
@*             @if (User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")))
            {
                <th scope="col">@Inventar.Resources.Resource.Price</th>
            }
            else
            {
                <th style="display:none" scope="col">@Inventar.Resources.Resource.Price</th>
            } *@
            <th style="display:@(User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")) ? "table-cell" : "none")" scope="col">Rabat %</th>
            <th style="display:@(User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")) ? "table-cell" : "none")" scope="col">@Inventar.Resources.Resource.Price</th>
            <th scope="col">@Inventar.Resources.Resource.Quantity</th>
            <th style="display:@(User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")) ? "table-cell" : "none")" scope="col">@Inventar.Resources.Resource.PriceTotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in  Model.Products)
        {
            <tr data-perm2="@item.PerM2" data-id="@item.Id">
                <th scope="row">
                    @item.Id
                </th>
                <td>
                    @item.ProductNumber
                </td>
                <td>
                    @item.Name
                </td>
                <td>
                    @item.Model
                </td>
                @if (item.PerM2 || (!item.PerM2 && (item.Width != null && item.Length != null)))
                {
                    <td style="white-space: nowrap">
                        @($"{item.Width}X{item.Length}")
                    </td>
                }
                @if (!item.PerM2 && (item.Width == null || item.Length == null))
                {
                    <td style="white-space: nowrap"></td>
                }
                <td id="m2Total-@item.Id" class="m2Total">
                    @(item.PerM2 ? @item.M2Total : "")
                </td>
                <td>
                    @item.Color
                </td>
                <td style="display:@(User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")) ? "table-cell" : "none")">
                    <input type="number" style="width:5rem" class="rabat" value="@item.Rabat" min="0" max="100">
                </td>
                <td style="display:@(User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")) ? "table-cell" : "none")">
                    <input type="number" style="width:5rem" class="price" value="@item.Price" min="0.1" required>
                </td>
                <td id="quantity-@item.Id" class="quantity">
                    @item.Quantity
                </td>
                <td id="priceTotal-@item.Id" class="priceTotal" style="color:@(item.PerM2 ? "green" : "black"); display:@(User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")) ? "table-cell" : "none")">
                    @(Math.Round(item.PriceTotal,2)) €
                </td>
            </tr>
        }
    </tbody>
</table>
<div style="text-align: right; margin-top: 10px; display:@(User.Identity.IsAuthenticated && (User.IsInRole("admin") || User.IsInRole("superadmin")) ? "block" : "none")">
    <strong>@Inventar.Resources.Resource.Total: <span id="totalPrice">0</span>€</strong>
</div>

<style>
    td, th {
        text-align: center;
    }
    input{
        border: 2px solid #111 !important;
    }

        input.is-invalid {
            border-color: red !important;
            background-color: #ffe6e6;
        }

    #suggestions {
        border: 1px solid #ccc;
        max-width: 300px;
        display: none;
        position: absolute;
        background: white;
        z-index: 1000;
    }

    .suggestion-item {
        padding: 8px;
        cursor: pointer;
    }

        .suggestion-item:hover {
            background: #007bff;
            color: white;
        }
</style>
<script>
    function calculateTotal() {
        let sum = 0;
        console.log("calculateTotal poceo");
        document.querySelectorAll(".priceTotal").forEach(function (element) {
            console.log(element.textContent);
            sum += parseFloat(element.textContent) || 0;
        });
        document.getElementById("totalPrice").textContent = sum.toFixed(2);
    }

    function calculateTotalWithRabat() {
        let sum = 0;
        let priceTotals = document.querySelectorAll(".priceTotal");
        let rabats = document.querySelectorAll(".rabat");
        let pm2s = document.querySelectorAll("tr[data-perm2]");
        let prices = document.querySelectorAll(".price");
        let quantitys = document.querySelectorAll(".quantity");
        let m2Totals = document.querySelectorAll(".m2Total");

        for (let i = 0; i < priceTotals.length; i++) {
            let priceTotal = parseFloat(priceTotals[i].textContent);
            let pm2 = pm2s[i].dataset.perm2;
            let rabat = parseFloat(rabats[i].value);
            let price = parseFloat(prices[i].value);
            let quantity = parseInt(quantitys[i].textContent);
            let m2Total = parseFloat(m2Totals[i].textContent);

            let totalPricePerUnit = price * quantity;
            let totalPricePerM2 = (price * m2Total);

            if (rabat) {
                let rbt = rabat / 100
                if (pm2 == "True") {
                    totalPricePerM2 -= rbt * totalPricePerM2;
                    sum += totalPricePerM2;
                }
                if (pm2 == "False") {
                    totalPricePerUnit -= rbt * totalPricePerUnit;
                    sum += totalPricePerUnit;
                }
            } else {
                sum += priceTotal;
            }

            if (pm2 == "True") {
                priceTotals[i].textContent = totalPricePerM2.toFixed(2) + "€";
            }
            if (pm2 == "False") {
                priceTotals[i].textContent = totalPricePerUnit.toFixed(2) + "€";
            }
        }
        document.getElementById("totalPrice").textContent = sum.toFixed(2);
    }

    calculateTotal();
    document.addEventListener("DOMContentLoaded", function () {
        function updateRow(row) {
            let priceInput = row.querySelector(".price");
            let rabatInput = row.querySelector(".rabat");

            let price = parseFloat(row.querySelector(".price").value);
            let pm2 = row.dataset.perm2;
            let quantity = parseInt(row.querySelector(".quantity").textContent) || 0;
            let m2Total = parseFloat(row.querySelector(".m2Total").textContent) || 0;
            let rabat = parseInt(row.querySelector(".rabat").value);

            // Basic validation
            if (isNaN(price) || price < 0) {
                priceInput.classList.add("is-invalid");
                return; // skip update if invalid
            } else {
                priceInput.classList.remove("is-invalid");
            }

            let totalPricePerUnit = price * quantity;
            let totalPricePerM2 = price * m2Total;

            if (rabat) {
                let rbt = rabat / 100
                if (pm2 == "True") {
                    totalPricePerM2 -= rbt * totalPricePerM2;
                }
                if (pm2 == "False") {
                    totalPricePerUnit -= rbt * totalPricePerUnit;
                }
            }

            if (pm2 == "True") {
                row.querySelector(".priceTotal").textContent = totalPricePerM2.toFixed(2) + "€";
            }
            if (pm2 == "False") {
                row.querySelector(".priceTotal").textContent = totalPricePerUnit.toFixed(2) + "€";
            }

            calculateTotal();

            saveToServer(row.dataset.id, price, rabat);
        }

        function saveToServer(id, price, rabat) {
            let data = {
                id: Number(id),
                price: Number(price),
                rabat: Number(rabat),
            };

            fetch('/InventoryItem/Update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => console.log("Server Response:", data))
                .catch(error => console.error("Error:", error));
        }

        document.querySelectorAll("#productTable tbody tr").forEach(row => {
            row.querySelectorAll(".price,.rabat").forEach(input => {
                input.addEventListener("input", function () {
                    updateRow(row);
                });
            });
        });
    });
</script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $("#FullName").on("input", function () {
            let query = $(this).val().trim();
            if (query.length < 3) {
                $("#suggestions").hide();
                return;
            }

            $.getJSON("/InventoryItem/SearchPeople", { query: query }, function (data) {
                let suggestions = $("#suggestions");
                suggestions.empty();

                if (data.length === 0) {
                    suggestions.hide();
                    return;
                }

                data.forEach(function (name) {
                    suggestions.append(`<div class="suggestion-item">${name}</div>`);
                });

                suggestions.show();
            });
        });

        // Fill the input field when user clicks on a suggestion
        $(document).on("click", ".suggestion-item", function () {
            $("#FullName").val($(this).text());
            $("#suggestions").hide();
        });

        // Hide suggestions if user clicks outside
        $(document).click(function (e) {
            if (!$(e.target).closest("#FullName, #suggestions").length) {
                $("#suggestions").hide();
            }
        });
    });
</script>
<script>
    function validateForm() {
        let valid = true;
        document.querySelectorAll(".price").forEach(input => {
            if (!input.value || parseFloat(input.value) < 0) {
                input.classList.add("is-invalid");
                valid = false;
            } else {
                input.classList.remove("is-invalid");
            }
        });

        return valid;
    }
</script>